{
  "openapi": "3.0.0",
  "info": {
    "title": "Friendlines API",
    "version": "1.0.0",
    "description": "Satirical social news API - Transform everyday updates into newsflashes",
    "contact": {
      "name": "Friendlines Team",
      "email": "core@friendlines.app"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "https://your-production-url.com",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique user identifier"
          },
          "username": {
            "type": "string",
            "description": "User display name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address"
          },
          "avatar": {
            "type": "string",
            "description": "URL to user avatar image"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "User creation timestamp"
          }
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique post identifier"
          },
          "userId": {
            "type": "string",
            "description": "ID of the user who created the post"
          },
          "content": {
            "type": "string",
            "description": "Original post content"
          },
          "newsflashContent": {
            "type": "string",
            "description": "AI-generated newsflash version"
          },
          "audience": {
            "type": "string",
            "enum": [
              "friends",
              "groups",
              "friends_of_friends"
            ],
            "description": "Target audience for the post"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Post creation timestamp"
          },
          "likes": {
            "type": "integer",
            "description": "Number of likes"
          },
          "comments": {
            "type": "integer",
            "description": "Number of comments"
          }
        }
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique group identifier"
          },
          "name": {
            "type": "string",
            "description": "Group name"
          },
          "description": {
            "type": "string",
            "description": "Group description"
          },
          "createdBy": {
            "type": "string",
            "description": "ID of the user who created the group"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of user IDs who are group members"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Group creation timestamp"
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Human-readable message"
          },
          "data": {
            "type": "object",
            "description": "Response data (varies by endpoint)"
          },
          "error": {
            "type": "string",
            "description": "Error message (only present on failures)"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "error": {
            "type": "string",
            "description": "Detailed error information"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and profile management"
    },
    {
      "name": "Posts",
      "description": "Post creation, management, and social interactions"
    },
    {
      "name": "Groups",
      "description": "Group management and membership"
    },
    {
      "name": "Social",
      "description": "Friendship system and social features"
    },
    {
      "name": "Notifications",
      "description": "Push notifications and user alerts"
    },
    {
      "name": "Upload",
      "description": "File upload endpoints"
    },
    {
      "name": "Development",
      "description": "Development and testing utilities"
    }
  ],
  "paths": {
    "/api/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User login/registration",
        "description": "Creates new user or logs in existing user (no password required)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "email"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "User display name",
                    "example": "john_doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User email address",
                    "example": "john@example.com"
                  },
                  "avatar": {
                    "type": "string",
                    "description": "URL to user avatar image",
                    "example": "https://example.com/avatar.jpg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get user profile by ID",
        "description": "Retrieve detailed user profile information",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID",
            "example": "user_123"
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  }
}